export const month = {
	verbal: {
		full: {
			ru: [
				'Январь',
				'Февраль',
				'Март',
				'Апрель',
				'Май',
				'Июнь',
				'Июль',
				'Август',
				'Сентябрь',
				'Октябрь',
				'Ноябрь',
				'Декабрь',
			],
		},
		full2: {
			ru: [
				'Января',
				'Февраля',
				'Марта',
				'Апреля',
				'Мая',
				'Июня',
				'Июля',
				'Августа',
				'Сентября',
				'Октября',
				'Ноября',
				'Декабря',
			],
		},
	},
};

export const weekDay = {
	verbal: {
		full: {
			ru: ['Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота', 'Воскресенье'],
		},
		short: {
			ru: ['Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб', 'Вс'],
		},
	},
};

/**
 * Если число меньше 10 возвращает число с 0 в начале,
 * например если параметром передано число 6 вернет "06"
 *
 * @param {Number} num - число для форматирования
 * @returns {String} - отформатированное число
 */
export const formatTime = (num) => {
	/* Проверка является ли параметр числом */
	if (isNaN(+num)) {
		// return console.error(
		// 	'в функцию formatTime форматирующую время (при необходимости конкатенирующую 0 перед числом если оно меньше 10) передано не число: ' +
		// 		num
		// );
	}
	/* / Проверка является ли параметр числом */

	/* Проверка является ли параметр целым числом */
	if (!Number.isInteger(num)) {
		// return console.error(
		// 	'в функцию formatTime форматирующую время (при необходимости конкатенирующую 0 перед числом если оно меньше 10) передано не целое число: ' +
		// 		num
		// );
	}
	/* / Проверка является ли параметр целым числом */

	if (num < 10) {
		return `0${num}`;
	}

	return String(num);
};

/**
 * Функция склоняет слово час
 *
 * @param {number} num - часы
 * @returns {String} - часы(параметр num) + склоненное слово час, например "2 часа"
 */
export function declensionHour(num) {
	/* Проверка является ли параметр числом */
	if (isNaN(+num)) {
		// return console.error(
		// 	'в функцию declensionHour склоняющую слово час в зависимотси от их количества передано не число: ' +
		// 		num
		// );
	}
	/* / Проверка является ли параметр числом */

	/* Проверка является ли параметр целым числом */
	if (!Number.isInteger(num)) {
		// return console.error(
		// 	'в функцию declensionHour склоняющую слово час в зависимотси от их количества передано не целое число: ' +
		// 		num
		// );
	}
	/* / Проверка является ли параметр целым числом */

	const n = Math.abs(num) % 100;
	const n1 = n % 10;
	if (n > 10 && n < 20) {
		return `${num} часов`;
	}
	if (n1 > 1 && n1 < 5) {
		return `${num} часа`;
	}
	if (n1 === 1) {
		return `${num} час`;
	}
	return `${num} часов`;
}

/**
 * Функция  принмиает минуты и возвращает строку типа "2 часа 30 минут" или "30 минут"
 * для рендеринга строк в модалке настройки продолжительности и цены консультации
 *
 * @param {Number} minutes - минуты из стейта продолжительность консультации
 *
 * @returns {String} - строка типа "2 часа 30 минут" или "30 минут"
 */
export const fullHoursAndMinutes = (minutes) => {
	const hours = minutes / 60; // дробный час например 1.5 часа

	if (hours === 0) {
		return '----';
	} else if (Number.isInteger(hours)) {
		// если поделилось без остатка, то есть кратное 60 (часу)
		return declensionHour(hours); // вернем часы цифрой
	} else if (!Number.isInteger(hours)) {
		// если поделилось с остатком
		const hoursFloor = Math.floor(hours); // округлим в меньшую сторону
		if (hoursFloor === 0) {
			// если передано 30 минут
			return '30 минут';
		} else {
			// если передано > 30 минут
			return `${declensionHour(hoursFloor)} 30 минут`; // сформируем строку в нужном формате
		}
	}
};

/**
 * Функция преобразует количество получасовых сессий в минуты
 *
 * @param {Number} sessionCount
 * @returns
 */
export const sessionCountInMinutes = (sessionCount) => {
	/* Проверка является ли параметр числом */
	if (isNaN(+sessionCount)) {
		// return console.error(
		// 	'в функцию sessionCountInMinutes преобразующую количество получасовых сессий в минуты передано не число: ' +
		// 		sessionCount
		// );
	}
	/* / Проверка является ли параметр числом */

	/* Проверка является ли параметр целым числом */
	if (!Number.isInteger(sessionCount)) {
		// console.error(
		// 	'в функцию sessionCountInMinutes преобразующую количество получасовых сессий в минуты передано не целое число: ' +
		// 		sessionCount
		// );
		return 0;
	}
	/* / Проверка является ли параметр целым числом */

	return sessionCount * 30;
};

/**
 * Функция преобразует минуты в количество получасовых сессий
 *
 * @param {Number} minutes
 * @returns
 */
export const minutesInSessionCount = (minutes) => {
	/* Проверка является ли параметр числом */
	if (isNaN(+minutes)) {
		// return console.error(
		// 	'в функцию minutesInSessionCount преобразующую минуты в количество получасовых сессий передано не число: ' +
		// 		minutes
		// );
	}
	/* / Проверка является ли параметр числом */

	/* Проверка является ли параметр целым числом */
	/* Если В силу стечения обстоятельств/повреждения
	 * базы/фазы луны/погоды на марсе в строку попало
	 * значение из которого нужную нам продолжительность,
	 * кратную 30 минутам никак не рассчитать. Вернет
	 * 0 и даст человеку выставить нужное время */
	if (!Number.isInteger(minutes)) {
		// console.error(
		// 	'в функцию minutesInSessionCount преобразующую минуты в количество получасовых сессий передано не целое число: ' +
		// 		minutes
		// );
		return 0;
	}
	/* / Проверка является ли параметр целым числом */

	return minutes / 30;
};
